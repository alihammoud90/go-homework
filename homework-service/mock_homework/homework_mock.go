// Code generated by MockGen. DO NOT EDIT.
// Source: go-homework/homework-service/proto (interfaces: HomeworkServiceClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "go-homework/homework-service/proto"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockHomeworkServiceClient is a mock of HomeworkServiceClient interface
type MockHomeworkServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHomeworkServiceClientMockRecorder
}

// MockHomeworkServiceClientMockRecorder is the mock recorder for MockHomeworkServiceClient
type MockHomeworkServiceClientMockRecorder struct {
	mock *MockHomeworkServiceClient
}

// NewMockHomeworkServiceClient creates a new mock instance
func NewMockHomeworkServiceClient(ctrl *gomock.Controller) *MockHomeworkServiceClient {
	mock := &MockHomeworkServiceClient{ctrl: ctrl}
	mock.recorder = &MockHomeworkServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHomeworkServiceClient) EXPECT() *MockHomeworkServiceClientMockRecorder {
	return m.recorder
}

// GetSum mocks base method
func (m *MockHomeworkServiceClient) GetSum(arg0 context.Context, arg1 *proto.Numbers, arg2 ...grpc.CallOption) (*proto.Sum, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSum", varargs...)
	ret0, _ := ret[0].(*proto.Sum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSum indicates an expected call of GetSum
func (mr *MockHomeworkServiceClientMockRecorder) GetSum(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSum", reflect.TypeOf((*MockHomeworkServiceClient)(nil).GetSum), varargs...)
}

// OrderNumbers mocks base method
func (m *MockHomeworkServiceClient) OrderNumbers(arg0 context.Context, arg1 *proto.NumbersToOrder, arg2 ...grpc.CallOption) (*proto.OrderedNumbers, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderNumbers", varargs...)
	ret0, _ := ret[0].(*proto.OrderedNumbers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderNumbers indicates an expected call of OrderNumbers
func (mr *MockHomeworkServiceClientMockRecorder) OrderNumbers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderNumbers", reflect.TypeOf((*MockHomeworkServiceClient)(nil).OrderNumbers), varargs...)
}
